digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 210"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-132"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8 section_9}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8 section_9}

header_2 [label="1 : load"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 12-21"]

section_7 [label="section: 22-33"]

section_8 [label="section: 34-121"]

section_9 [label="section: 133-210"]


// END RANK section_1

header_2 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* load"]
// END RANK header_2

prose_3 -> { raw_11 prespace_12 literal_13 raw_14}
{rank=same; raw_11 prespace_12 literal_13 raw_14}

raw_11 [label="raw"]

prespace_12 [label="prespace"]

literal_13 [label="literal"]

raw_14 [label="raw"]


// END RANK prose_3

raw_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The responsibilities of"]
// END RANK raw_11

prespace_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_12

literal_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="load"]
// END RANK literal_13

raw_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":
"]
// END RANK raw_14

prose_4 -> { raw_19}
{rank=same; raw_19}

raw_19 [label="raw"]


// END RANK prose_4

raw_19 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- Parse arguments
"]
// END RANK raw_19

prose_5 -> { raw_21}
{rank=same; raw_21}

raw_21 [label="raw"]


// END RANK prose_5

raw_21 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- If interactive and scripts:
   - Clone the global namespace
   - Run scripts into namespace clone
   - Launch REPL.
"]
// END RANK raw_21

section_6 -> { header_23 prose_24 codeblock_25}
{rank=same; header_23 prose_24 codeblock_25}

header_23 [label="3 : Check for lua-utf8"]

prose_24 [label="prose"]

codeblock_25 [label="code block 16-19"]


// END RANK section_6

header_23 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Check for lua-utf8"]
// END RANK header_23

prose_24 -> { raw_27}
{rank=same; raw_27}

raw_27 [label="raw"]


// END RANK prose_24

raw_27 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_27

codeblock_25 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- local utf8 = require \"lua-utf8\"
-- assert(utf8, \"no utf8\")"]
// END RANK codeblock_25

section_7 -> { header_30 prose_31 prose_32 codeblock_33}
{rank=same; header_30 prose_31 prose_32 codeblock_33}

header_30 [label="2 : Bridge Path"]

prose_31 [label="prose"]

prose_32 [label="prose"]

codeblock_33 [label="code block 28-31"]


// END RANK section_7

header_30 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Bridge Path"]
// END RANK header_30

prose_31 -> { raw_35 prespace_36 literal_37 raw_38 prespace_39 literal_40 raw_41}
{rank=same; raw_35 prespace_36 literal_37 raw_38 prespace_39 literal_40 raw_41}

raw_35 [label="raw"]

prespace_36 [label="prespace"]

literal_37 [label="literal"]

raw_38 [label="raw"]

prespace_39 [label="prespace"]

literal_40 [label="literal"]

raw_41 [label="raw"]


// END RANK prose_31

raw_35 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_35

prespace_36 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_36

literal_37 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_37

raw_38 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" uses its own path, distinct from the"]
// END RANK raw_38

prespace_39 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_39

literal_40 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="LUA_PATH"]
// END RANK literal_40

raw_41 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" environment variable.
"]
// END RANK raw_41

prose_32 -> { raw_49 prespace_50 literal_51 raw_52}
{rank=same; raw_49 prespace_50 literal_51 raw_52}

raw_49 [label="raw"]

prespace_50 [label="prespace"]

literal_51 [label="literal"]

raw_52 [label="raw"]


// END RANK prose_32

raw_49 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is, predictably enough,"]
// END RANK raw_49

prespace_50 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_50

literal_51 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="BRIDGE_PATH"]
// END RANK literal_51

raw_52 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_52

codeblock_33 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK codeblock_33

section_8 -> { header_58 prose_59 codeblock_60 section_61}
{rank=same; header_58 prose_59 codeblock_60 section_61}

header_58 [label="2 : Stricture"]

prose_59 [label="prose"]

codeblock_60 [label="code block 39-119"]

section_61 [label="section: 122-132"]


// END RANK section_8

header_58 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Stricture"]
// END RANK header_58

prose_59 -> { raw_63}
{rank=same; raw_63}

raw_63 [label="raw"]


// END RANK prose_59

raw_63 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Lifted straight from [[penlight]
[https://stevedonovan.github.io/Penlight/api/index.html].
"]
// END RANK raw_63

codeblock_60 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="do
    local getinfo, error, rawset, rawget = debug.getinfo, error, rawset, rawget
    local strict = {}

    local function what ()
        local d = getinfo(3, \"S\")
        return d and d.what or \"C\"
    end

    --- make an existing table strict.
    -- @string name name of table (optional)
    -- @tab[opt] mod table - if `nil` then we'll return a new table
    -- @tab[opt] predeclared - table of variables that are to be considered predeclared.
    -- @return the given table, or a new table
    local function stricture(name,mod,predeclared)
        local mt, old_newindex, old_index, old_index_type, global, closed
        if predeclared then
            global = predeclared.__global
            closed = predeclared.__closed
        end
        if type(mod) == 'table' then
            mt = getmetatable(mod)
            if mt and rawget(mt,'__declared') then return end -- already patched...
        else
            mod = {}
        end
        if mt == nil then
            mt = {}
            setmetatable(mod, mt)
        else
            old_newindex = mt.__newindex
            old_index = mt.__index
            old_index_type = type(old_index)
        end
        mt.__declared = predeclared or {}
        mt.__newindex = function(t, n, v)
            if old_newindex then
                old_newindex(t, n, v)
                if rawget(t,n)~=nil then return end
            end
            if not mt.__declared[n] then
                if global then
                    local w = what()
                    if w ~= \"main\" and w ~= \"C\" then
                        error(\"assign to undeclared global '\"..n..\"'\", 2)
                    end
                end
                mt.__declared[n] = true
            end
            rawset(t, n, v)
        end
        mt.__index = function(t,n)
            if not mt.__declared[n] and what() ~= \"C\" then
                if old_index then
                    if old_index_type == \"table\" then
                        local fallback = old_index[n]
                        if fallback ~= nil then
                            return fallback
                        end
                    else
                        local res = old_index(t, n)
                        if res ~= nil then
                            return res
                        end
                    end
                end
                local msg = \"variable '\"..n..\"' is not declared\"
                if name then
                    msg = msg .. \" in '\"..name..\"'\"
                end
                error(msg, 2)
            end
            return rawget(t, n)
        end
        return mod
    end

    stricture(nil,_G,{_PROMPT=true,__global=true})
end"]
// END RANK codeblock_60

section_61 -> { header_66 prose_67 codeblock_68}
{rank=same; header_66 prose_67 codeblock_68}

header_66 [label="4 : gc"]

prose_67 [label="prose"]

codeblock_68 [label="code block 128-130"]


// END RANK section_61

header_66 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** gc"]
// END RANK header_66

prose_67 -> { raw_70 prespace_71 literal_72 raw_73 prespace_74 literal_75 raw_76}
{rank=same; raw_70 prespace_71 literal_72 raw_73 prespace_74 literal_75 raw_76}

raw_70 [label="raw"]

prespace_71 [label="prespace"]

literal_72 [label="literal"]

raw_73 [label="raw"]

prespace_74 [label="prespace"]

literal_75 [label="literal"]

raw_76 [label="raw"]


// END RANK prose_67

raw_70 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

All of these"]
// END RANK raw_70

prespace_71 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_71

literal_72 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="do"]
// END RANK literal_72

raw_73 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" blocks are to emulate the per-module behavior of Lua,
creating closures so that all"]
// END RANK raw_73

prespace_74 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_74

literal_75 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local"]
// END RANK literal_75

raw_76 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" variables become garbage.  So let's
collect them.
"]
// END RANK raw_76

codeblock_68 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="collectgarbage()"]
// END RANK codeblock_68

section_9 -> { header_85 prose_86 prose_87 codeblock_88}
{rank=same; header_85 prose_86 prose_87 codeblock_88}

header_85 [label="2 : Parse"]

prose_86 [label="prose"]

prose_87 [label="prose"]

codeblock_88 [label="code block 139-197"]


// END RANK section_9

header_85 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Parse"]
// END RANK header_85

prose_86 -> { raw_90 prespace_91 literal_92 raw_93}
{rank=same; raw_90 prespace_91 literal_92 raw_93}

raw_90 [label="raw"]

prespace_91 [label="prespace"]

literal_92 [label="literal"]

raw_93 [label="raw"]


// END RANK prose_86

raw_90 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Currently we are doing the dumbest possible thing to parse"]
// END RANK raw_90

prespace_91 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_91

literal_92 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="br"]
// END RANK literal_92

raw_93 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" invocations.
"]
// END RANK raw_93

prose_87 -> { raw_98 prespace_99 literal_100 raw_101}
{rank=same; raw_98 prespace_99 literal_100 raw_101}

raw_98 [label="raw"]

prespace_99 [label="prespace"]

literal_100 [label="literal"]

raw_101 [label="raw"]


// END RANK prose_87

raw_98 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Now that we have"]
// END RANK raw_98

prespace_99 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_99

literal_100 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="argparse"]
// END RANK literal_100

raw_101 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" it's time to do it right.
"]
// END RANK raw_101

codeblock_88 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- we're going to run in parallel while we build the parser:

rawset(_G, \"brParse\", package.argparse()
   : require_command (false))

brParse
   : name \"bridge\"
   : description \"An lua, howth castle & environs.\"
   : epilog \"For more info, see https://specialcircumstanc.es\"
   : command (\"orb o\", \"orb compiler\", \"orb subcommands\")
   --: default \"bridge\"

-- this will fetch us our REPL using the usual frippery,
-- we've put a stub block around it as deprecation
---[[
local function _strip(argument)
   -- a dimwitted thing which removes a magic argument
   for i = 0, #argument do
      if i == 0 then
         argument[i] = nil
      else
         argument[i-1] = argument[i]
      end
   end
   argument[#argument] = nil
   return argument
end

local function _makeParsyHappen()
   -- stop trying to make Parsy happen.
   local parsed, msg = brParse:parse()
   rawset(_G, \"_isParsed\", parsed)
   rawset(_G, \"_argResult\", msg)
   print(_G._isParsed)
   if msg then
      print(msg)
   end
end

if rawget(_G, \"arg\") ~= nil then
    -- time for an ugly hack:
    if arg[0] == \"OLD\" then
        _strip(arg)
        _makeParsyHappen()
        -- do old boot sequence
        if string.sub(arg[0], -4) == \".lua\" then
            loadfile(arg[0])()
        elseif string.sub(arg[0], -4) == \".raw\" then
           loadfile(arg[0])()
        else
           loadfile(arg[0] .. \".lua\")()
        end
    else
        _makeParsyHappen()
    end
end
--]]"]
// END RANK codeblock_88


}

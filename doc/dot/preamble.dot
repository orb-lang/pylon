digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 254"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-229"]


// END RANK doc_0

section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7 section_8}

header_2 [label="1 : Preamble"]

prose_3 [label="prose"]

section_4 [label="section: 7-14"]

section_5 [label="section: 15-56"]

section_6 [label="section: 57-93"]

section_7 [label="section: 94-229"]

section_8 [label="section: 230-247"]


// END RANK section_1

header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Preamble"]
// END RANK header_2

prose_3 -> { raw_10 prespace_11 literal_12 raw_13}
{rank=same; raw_10 prespace_11 literal_12 raw_13}

raw_10 [label="raw"]

prespace_11 [label="prespace"]

literal_12 [label="literal"]

raw_13 [label="raw"]


// END RANK prose_3

raw_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This adds the package loader, and will eventually contain the"]
// END RANK raw_10

prespace_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_11

literal_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_12

raw_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" standard
library.

"]
// END RANK raw_13

section_4 -> { header_18 prose_19 codeblock_20}
{rank=same; header_18 prose_19 codeblock_20}

header_18 [label="4 : do block"]

prose_19 [label="prose"]

codeblock_20 [label="code block 11-13"]


// END RANK section_4

header_18 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** do block"]
// END RANK header_18

prose_19 -> { raw_22 prespace_23 literal_24 raw_25}
{rank=same; raw_22 prespace_23 literal_24 raw_25}

raw_22 [label="raw"]

prespace_23 [label="prespace"]

literal_24 [label="literal"]

raw_25 [label="raw"]


// END RANK prose_19

raw_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Since we're loading it straight from the binary, wrap it in a"]
// END RANK raw_22

prespace_23 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_23

literal_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="do"]
// END RANK literal_24

raw_25 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" block.
"]
// END RANK raw_25

codeblock_20 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="do"]
// END RANK codeblock_20

section_5 -> { header_31 prose_32 codeblock_33}
{rank=same; header_31 prose_32 codeblock_33}

header_31 [label="3 : SQL statements"]

prose_32 [label="prose"]

codeblock_33 [label="code block 17-54"]


// END RANK section_5

header_31 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** SQL statements"]
// END RANK header_31

prose_32 -> { raw_35}
{rank=same; raw_35}

raw_35 [label="raw"]


// END RANK prose_32

raw_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_35

codeblock_33 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   local get_project_id = [[
SELECT CAST (project.project_id AS REAL) FROM project
WHERE project.name = %s;
]]

   local get_code_id_by_hash = [[
SELECT CAST (code.code_id AS REAL) FROM code
WHERE code.hash = %s;
]]

   local get_latest_module_code = [[
SELECT CAST (module.code AS REAL) FROM module
WHERE module.project = %d
   AND module.name = %s
ORDER BY module.time DESC LIMIT 1;
]]

   local get_all_module_ids = [[
SELECT CAST (module.code AS REAL),
       CAST (module.project AS REAL)
FROM module
WHERE module.name = %s
ORDER BY module.time DESC;
]]

local get_latest_module_code_id = [[
SELECT CAST (module.code AS REAL)
FROM module
WHERE module.name = %s
ORDER BY module.time DESC LIMIT 1;
]]

local get_latest_module_bytecode = [[
SELECT code.binary FROM code
WHERE code.code_id = %d ;
]]"]
// END RANK codeblock_33

section_6 -> { header_38 prose_39 prose_40 prose_41 codeblock_42 prose_43 codeblock_44}
{rank=same; header_38 prose_39 prose_40 prose_41 codeblock_42 prose_43 codeblock_44}

header_38 [label="3 : _openBridgeModules()"]

prose_39 [label="prose"]

prose_40 [label="prose"]

prose_41 [label="prose"]

codeblock_42 [label="code block 68-80"]

prose_43 [label="prose"]

codeblock_44 [label="code block 84-92"]


// END RANK section_6

header_38 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** _openBridgeModules()"]
// END RANK header_38

prose_39 -> { raw_46 prespace_47 literal_48 raw_49 prespace_50 literal_51 raw_52 prespace_53 literal_54 raw_55}
{rank=same; raw_46 prespace_47 literal_48 raw_49 prespace_50 literal_51 raw_52 prespace_53 literal_54 raw_55}

raw_46 [label="raw"]

prespace_47 [label="prespace"]

literal_48 [label="literal"]

raw_49 [label="raw"]

prespace_50 [label="prespace"]

literal_51 [label="literal"]

raw_52 [label="raw"]

prespace_53 [label="prespace"]

literal_54 [label="literal"]

raw_55 [label="raw"]


// END RANK prose_39

raw_46 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This either opens"]
// END RANK raw_46

prespace_47 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_47

literal_48 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge.modules"]
// END RANK literal_48

raw_49 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", returning a"]
// END RANK raw_49

prespace_50 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_50

literal_51 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="conn"]
// END RANK literal_51

raw_52 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", or failing that
returns"]
// END RANK raw_52

prespace_53 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_53

literal_54 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_54

raw_55 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_55

prose_40 -> { raw_66 prespace_67 literal_68 raw_69 prespace_70 literal_71 raw_72 prespace_73 literal_74 raw_75}
{rank=same; raw_66 prespace_67 literal_68 raw_69 prespace_70 literal_71 raw_72 prespace_73 literal_74 raw_75}

raw_66 [label="raw"]

prespace_67 [label="prespace"]

literal_68 [label="literal"]

raw_69 [label="raw"]

prespace_70 [label="prespace"]

literal_71 [label="literal"]

raw_72 [label="raw"]

prespace_73 [label="prespace"]

literal_74 [label="literal"]

raw_75 [label="raw"]


// END RANK prose_40

raw_66 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If we get a conn, we append a"]
// END RANK raw_66

prespace_67 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_67

literal_68 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="package.loaders"]
// END RANK literal_68

raw_69 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" with it, otherwise we do
nothing.  Creating"]
// END RANK raw_69

prespace_70 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_70

literal_71 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge.modules"]
// END RANK literal_71

raw_72 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in the event it doesn't exist is the
responsibility of"]
// END RANK raw_72

prespace_73 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_73

literal_74 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orb"]
// END RANK literal_74

raw_75 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which contains the compiler.
"]
// END RANK raw_75

prose_41 -> { raw_86}
{rank=same; raw_86}

raw_86 [label="raw"]


// END RANK prose_41

raw_86 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
First, let's get a plausible filename:
"]
// END RANK raw_86

codeblock_42 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   local home_dir = os.getenv \"HOME\"
   local bridge_modules = os.getenv \"BRIDGE_MODULES\"

   if not bridge_modules then
      local xdg_data_home = os.getenv \"XDG_DATA_HOME\"
      if xdg_data_home then
         bridge_modules = xdg_data_home .. \"/bridge/bridge.modules\"
      else
         bridge_modules = home_dir .. \"/.local/share/bridge/bridge.modules\"
      end
   end"]
// END RANK codeblock_42

prose_43 -> { raw_89}
{rank=same; raw_89}

raw_89 [label="raw"]


// END RANK prose_43

raw_89 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Then, since SQL will happily make something that doesn't exist, let's check:
"]
// END RANK raw_89

codeblock_44 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   local br_mod = io.open(bridge_modules)
   if br_mod then
      -- close it
      br_mod:close()
      -- do the following dirty hack:
      br_mod = true
   end"]
// END RANK codeblock_44

section_7 -> { header_92 prose_93 structure_94 structure_95 prose_96 codeblock_97}
{rank=same; header_92 prose_93 structure_94 structure_95 prose_96 codeblock_97}

header_92 [label="3 : _loadModule(conn, mod_name)"]

prose_93 [label="prose"]

structure_94 [label="structure"]

structure_95 [label="structure"]

prose_96 [label="prose"]

codeblock_97 [label="code block 108-227"]


// END RANK section_7

header_92 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** _loadModule(conn, mod_name)"]
// END RANK header_92

prose_93 -> { raw_99}
{rank=same; raw_99}

raw_99 [label="raw"]


// END RANK prose_93

raw_99 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Load a module given its name and a given database conn.
"]
// END RANK raw_99

structure_94 -> { hashline_101}
{rank=same; hashline_101}

hashline_101 [label="hashline"]


// END RANK structure_94

hashline_101 -> { hashtag_102}
{rank=same; hashtag_102}

hashtag_102 [label="hashtag"]


// END RANK hashline_101

hashtag_102 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="NB"]
// END RANK hashtag_102

structure_95 -> { hashline_104}
{rank=same; hashline_104}

hashline_104 [label="hashline"]


// END RANK structure_95

hashline_104 -> { hashtag_105}
{rank=same; hashtag_105}

hashtag_105 [label="hashtag"]


// END RANK hashline_104

hashtag_105 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Todo"]
// END RANK hashtag_105

prose_96 -> { raw_107 prespace_108 literal_109 raw_110 prespace_111 literal_112 raw_113}
{rank=same; raw_107 prespace_108 literal_109 raw_110 prespace_111 literal_112 raw_113}

raw_107 [label="raw"]

prespace_108 [label="prespace"]

literal_109 [label="literal"]

raw_110 [label="raw"]

prespace_111 [label="prespace"]

literal_112 [label="literal"]

raw_113 [label="raw"]


// END RANK prose_96

raw_107 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
names look like"]
// END RANK raw_107

prespace_108 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_108

literal_109 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orb/src/Orbit/handleline.orb"]
// END RANK literal_109

raw_110 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" instead of"]
// END RANK raw_110

prespace_111 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_111

literal_112 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Orbit/handleline"]
// END RANK literal_112

raw_113 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_113

codeblock_97 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   local function _unwrapForeignKey(result)
      if result and result[1] and result[1][1] then
         return result[1][1]
      else
         return nil
      end
   end

   local function _loadModule(mod_name)
      assert(type(mod_name) == \"string\", \"mod_name must be a string\")
      print (\"attempting to load \" .. mod_name)
      local conn = sql.open(bridge_modules)
      if not conn then print \"conn fail\" ; return nil end
      package.bridge_loaded = package.bridge_loaded or {}
      -- split the module into project and modname
      local project, mod = string.match(mod_name, \"(.*):(.*)\")
      if not mod then
         mod = mod_name
      end
      local proj_name = project or \"\"
      --print (\"loading \" .. proj_name .. \" \" .. mod)
      -- might be \"module/module\":
      local mod_double = mod .. \"/\" .. mod
      -- might be \"project:module\" -> \"project/module\"
      local proj_double = \"\"
      if project then
         proj_double = project .. \"/\" .. mod
      end
      local code_id = nil
      if project then
         -- retrieve module name by project
         local project_id = _unwrapForeignKey(
                               conn:exec(
                               sql.format(get_project_id, project)))
         if not project_id then
            --print \"no project id\"
            return nil
         end
         code_id = _unwrapForeignKey(
                            conn:exec(
                            sql.format(get_latest_module_code,
                                       project_id, mod)))
         if code_id then
            --print \"project id + mod worked\"
         end
         if not code_id then
            -- try mod_double
            --print (\"trying mod_double \" .. mod_double)
            code_id = _unwrapForeignKey(
                            conn:exec(
                            sql.format(get_latest_module_code,
                                       project_id, mod_double)))
            if code_id then
               --print \"mod_double succeeded\"
            end
         end
         if not code_id then
            -- try proj_double
            code_id = _unwrapForeignKey(
                            conn:exec(
                            sql.format(get_latest_module_bytecode,
                                       project_id, proj_double)))
         end
      else
         -- retrieve by bare module name
         code_id = _unwrapForeignKey(
                                 conn:exec(
                                 sql.format(get_latest_module_id,
                                            mod)))
         if code_id then
            print \"code_id acquired\"
         end
         -- Think this logic is dodgy...
         --[[
         local foreign_keys = conn:exec(sql.format(get_all_module_ids, mod))
         if foreign_keys == nil then
            foreign_keys = conn:exec(sql.format(get_all_module_ids,
                                                mod_double))
            if foreign_keys == nil then
               --print ('no foreign key')
               return nil
            end
         else
            -- iterate through project_ids to check if we have more than one
            -- project with the same module name
            local p_id = foreign_keys[2][1]
            local same_project = true
            for i = 2, #foreign_keys[2] do
               same_project = same_project and p_id == foreign_keys[2][i]
            end
            if not same_project then
               package.warning = package.warning or {}
               table.insert(package.warning,
                  \"warning: multiple projects contain a module called \" .. mod)
            end
            code_id = foreign_keys[1][1]
         end
         --]]
      end
      if not code_id then
         print \"no code_id\"
         conn:close()
         return nil
      end
      local bytecode = _unwrapForeignKey(
                              conn:exec(
                              sql.format(get_latest_module_bytecode, code_id)))
      if bytecode then
         package.bridge_loaded[#package.bridge_loaded + 1] = \"@\" .. mod_name
         print (\"loaded \" .. mod_name .. \" from bridge.modules\")
         conn:close()
         return load(bytecode, \"@\" .. mod_name)
      else
         print (\"unable to load: \" .. mod_name)
         conn:close()
         return nil
      end
   end"]
// END RANK codeblock_97

section_8 -> { header_122 prose_123 codeblock_124 section_125}
{rank=same; header_122 prose_123 codeblock_124 section_125}

header_122 [label="3 : Add to package.loaders"]

prose_123 [label="prose"]

codeblock_124 [label="code block 236-245"]

section_125 [label="section: 248-254"]


// END RANK section_8

header_122 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Add to package.loaders"]
// END RANK header_122

prose_123 -> { raw_127 prespace_128 literal_129 raw_130}
{rank=same; raw_127 prespace_128 literal_129 raw_130}

raw_127 [label="raw"]

prespace_128 [label="prespace"]

literal_129 [label="literal"]

raw_130 [label="raw"]


// END RANK prose_123

raw_127 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

If"]
// END RANK raw_127

prespace_128 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_128

literal_129 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge.modules"]
// END RANK literal_129

raw_130 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" exists!
"]
// END RANK raw_130

codeblock_124 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   if br_mod then
      print \"loading bridge.modules\"
      local insert = assert(table.insert)
      _G.packload = _loadModule
      insert(package.loaders, 1, _G.packload)
   else
      print \"no bridge.modules\"
   end"]
// END RANK codeblock_124

section_125 -> { header_136 prose_137 codeblock_138}
{rank=same; header_136 prose_137 codeblock_138}

header_136 [label="4 : end do block"]

prose_137 [label="prose"]

codeblock_138 [label="code block 252-254"]


// END RANK section_125

header_136 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** end do block"]
// END RANK header_136

prose_137 -> { raw_140}
{rank=same; raw_140}

raw_140 [label="raw"]


// END RANK prose_137

raw_140 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This makes everything in the block into garbage if a loader isn't generated.
"]
// END RANK raw_140

codeblock_138 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="end"]
// END RANK codeblock_138


}

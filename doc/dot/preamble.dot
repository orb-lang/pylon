digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 273"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-247"]


// END RANK doc_0

section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7 section_8 section_9}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7 section_8 section_9}

header_2 [label="1 : Preamble"]

prose_3 [label="prose"]

section_4 [label="section: 7-14"]

section_5 [label="section: 15-20"]

section_6 [label="section: 21-62"]

section_7 [label="section: 63-99"]

section_8 [label="section: 100-247"]

section_9 [label="section: 248-266"]


// END RANK section_1

header_2 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Preamble"]
// END RANK header_2

prose_3 -> { raw_11 prespace_12 literal_13 raw_14}
{rank=same; raw_11 prespace_12 literal_13 raw_14}

raw_11 [label="raw"]

prespace_12 [label="prespace"]

literal_13 [label="literal"]

raw_14 [label="raw"]


// END RANK prose_3

raw_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This adds the package loader, and will eventually contain the"]
// END RANK raw_11

prespace_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_12

literal_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_13

raw_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" standard
library.

"]
// END RANK raw_14

section_4 -> { header_19 prose_20 codeblock_21}
{rank=same; header_19 prose_20 codeblock_21}

header_19 [label="4 : do block"]

prose_20 [label="prose"]

codeblock_21 [label="code block 11-13"]


// END RANK section_4

header_19 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** do block"]
// END RANK header_19

prose_20 -> { raw_23 prespace_24 literal_25 raw_26}
{rank=same; raw_23 prespace_24 literal_25 raw_26}

raw_23 [label="raw"]

prespace_24 [label="prespace"]

literal_25 [label="literal"]

raw_26 [label="raw"]


// END RANK prose_20

raw_23 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Since we're loading it straight from the binary, wrap it in a"]
// END RANK raw_23

prespace_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_24

literal_25 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="do"]
// END RANK literal_25

raw_26 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" block.
"]
// END RANK raw_26

codeblock_21 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="do"]
// END RANK codeblock_21

section_5 -> { header_32 prose_33 codeblock_34}
{rank=same; header_32 prose_33 codeblock_34}

header_32 [label="4 : bridge_modules"]

prose_33 [label="prose"]

codeblock_34 [label="code block 17-19"]


// END RANK section_5

header_32 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** bridge_modules"]
// END RANK header_32

prose_33 -> { raw_36}
{rank=same; raw_36}

raw_36 [label="raw"]


// END RANK prose_33

raw_36 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_36

codeblock_34 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="package.bridge_modules = { }"]
// END RANK codeblock_34

section_6 -> { header_39 prose_40 codeblock_41}
{rank=same; header_39 prose_40 codeblock_41}

header_39 [label="3 : SQL statements"]

prose_40 [label="prose"]

codeblock_41 [label="code block 23-60"]


// END RANK section_6

header_39 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** SQL statements"]
// END RANK header_39

prose_40 -> { raw_43}
{rank=same; raw_43}

raw_43 [label="raw"]


// END RANK prose_40

raw_43 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_43

codeblock_41 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   local get_project_id = [[
SELECT CAST (project.project_id AS REAL) FROM project
WHERE project.name = %s;
]]

   local get_code_id_by_hash = [[
SELECT CAST (code.code_id AS REAL) FROM code
WHERE code.hash = %s;
]]

   local get_latest_module_code = [[
SELECT CAST (module.code AS REAL) FROM module
WHERE module.project = %d
   AND module.name = %s
ORDER BY module.time DESC LIMIT 1;
]]

   local get_all_module_ids = [[
SELECT CAST (module.code AS REAL),
       CAST (module.project AS REAL)
FROM module
WHERE module.name = %s
ORDER BY module.time DESC;
]]

local get_latest_module_code_id = [[
SELECT CAST (module.code AS REAL)
FROM module
WHERE module.name = %s
ORDER BY module.time DESC LIMIT 1;
]]

local get_latest_module_bytecode = [[
SELECT code.binary FROM code
WHERE code.code_id = %d ;
]]"]
// END RANK codeblock_41

section_7 -> { header_46 prose_47 prose_48 prose_49 codeblock_50 prose_51 codeblock_52}
{rank=same; header_46 prose_47 prose_48 prose_49 codeblock_50 prose_51 codeblock_52}

header_46 [label="3 : _openBridgeModules()"]

prose_47 [label="prose"]

prose_48 [label="prose"]

prose_49 [label="prose"]

codeblock_50 [label="code block 74-86"]

prose_51 [label="prose"]

codeblock_52 [label="code block 90-98"]


// END RANK section_7

header_46 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** _openBridgeModules()"]
// END RANK header_46

prose_47 -> { raw_54 prespace_55 literal_56 raw_57 prespace_58 literal_59 raw_60 prespace_61 literal_62 raw_63}
{rank=same; raw_54 prespace_55 literal_56 raw_57 prespace_58 literal_59 raw_60 prespace_61 literal_62 raw_63}

raw_54 [label="raw"]

prespace_55 [label="prespace"]

literal_56 [label="literal"]

raw_57 [label="raw"]

prespace_58 [label="prespace"]

literal_59 [label="literal"]

raw_60 [label="raw"]

prespace_61 [label="prespace"]

literal_62 [label="literal"]

raw_63 [label="raw"]


// END RANK prose_47

raw_54 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This either opens"]
// END RANK raw_54

prespace_55 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_55

literal_56 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge.modules"]
// END RANK literal_56

raw_57 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", returning a"]
// END RANK raw_57

prespace_58 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_58

literal_59 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="conn"]
// END RANK literal_59

raw_60 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", or failing that
returns"]
// END RANK raw_60

prespace_61 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_61

literal_62 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_62

raw_63 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_63

prose_48 -> { raw_74 prespace_75 literal_76 raw_77 prespace_78 literal_79 raw_80 prespace_81 literal_82 raw_83}
{rank=same; raw_74 prespace_75 literal_76 raw_77 prespace_78 literal_79 raw_80 prespace_81 literal_82 raw_83}

raw_74 [label="raw"]

prespace_75 [label="prespace"]

literal_76 [label="literal"]

raw_77 [label="raw"]

prespace_78 [label="prespace"]

literal_79 [label="literal"]

raw_80 [label="raw"]

prespace_81 [label="prespace"]

literal_82 [label="literal"]

raw_83 [label="raw"]


// END RANK prose_48

raw_74 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If we get a conn, we append a"]
// END RANK raw_74

prespace_75 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_75

literal_76 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="package.loaders"]
// END RANK literal_76

raw_77 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" with it, otherwise we do
nothing.  Creating"]
// END RANK raw_77

prespace_78 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_78

literal_79 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge.modules"]
// END RANK literal_79

raw_80 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in the event it doesn't exist is the
responsibility of"]
// END RANK raw_80

prespace_81 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_81

literal_82 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orb"]
// END RANK literal_82

raw_83 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which contains the compiler.
"]
// END RANK raw_83

prose_49 -> { raw_94}
{rank=same; raw_94}

raw_94 [label="raw"]


// END RANK prose_49

raw_94 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
First, let's get a plausible filename:
"]
// END RANK raw_94

codeblock_50 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   local home_dir = os.getenv \"HOME\"
   local bridge_modules = os.getenv \"BRIDGE_MODULES\"

   if not bridge_modules then
      local xdg_data_home = os.getenv \"XDG_DATA_HOME\"
      if xdg_data_home then
         bridge_modules = xdg_data_home .. \"/bridge/bridge.modules\"
      else
         bridge_modules = home_dir .. \"/.local/share/bridge/bridge.modules\"
      end
   end"]
// END RANK codeblock_50

prose_51 -> { raw_97}
{rank=same; raw_97}

raw_97 [label="raw"]


// END RANK prose_51

raw_97 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Then, since SQL will happily make something that doesn't exist, let's check:
"]
// END RANK raw_97

codeblock_52 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   local br_mod = io.open(bridge_modules)
   if br_mod then
      -- close it
      br_mod:close()
      -- do the following dirty hack:
      br_mod = true
   end"]
// END RANK codeblock_52

section_8 -> { header_100 prose_101 structure_102 structure_103 prose_104 codeblock_105}
{rank=same; header_100 prose_101 structure_102 structure_103 prose_104 codeblock_105}

header_100 [label="3 : _loadModule(conn, mod_name)"]

prose_101 [label="prose"]

structure_102 [label="structure"]

structure_103 [label="structure"]

prose_104 [label="prose"]

codeblock_105 [label="code block 114-245"]


// END RANK section_8

header_100 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** _loadModule(conn, mod_name)"]
// END RANK header_100

prose_101 -> { raw_107}
{rank=same; raw_107}

raw_107 [label="raw"]


// END RANK prose_101

raw_107 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Load a module given its name and a given database conn.
"]
// END RANK raw_107

structure_102 -> { hashline_109}
{rank=same; hashline_109}

hashline_109 [label="hashline"]


// END RANK structure_102

hashline_109 -> { hashtag_110}
{rank=same; hashtag_110}

hashtag_110 [label="hashtag"]


// END RANK hashline_109

hashtag_110 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="NB"]
// END RANK hashtag_110

structure_103 -> { hashline_112}
{rank=same; hashline_112}

hashline_112 [label="hashline"]


// END RANK structure_103

hashline_112 -> { hashtag_113}
{rank=same; hashtag_113}

hashtag_113 [label="hashtag"]


// END RANK hashline_112

hashtag_113 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Todo"]
// END RANK hashtag_113

prose_104 -> { raw_115 prespace_116 literal_117 raw_118 prespace_119 literal_120 raw_121}
{rank=same; raw_115 prespace_116 literal_117 raw_118 prespace_119 literal_120 raw_121}

raw_115 [label="raw"]

prespace_116 [label="prespace"]

literal_117 [label="literal"]

raw_118 [label="raw"]

prespace_119 [label="prespace"]

literal_120 [label="literal"]

raw_121 [label="raw"]


// END RANK prose_104

raw_115 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
names look like"]
// END RANK raw_115

prespace_116 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_116

literal_117 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orb/src/Orbit/handleline.orb"]
// END RANK literal_117

raw_118 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" instead of"]
// END RANK raw_118

prespace_119 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_119

literal_120 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Orbit/handleline"]
// END RANK literal_120

raw_121 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_121

codeblock_105 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   local function _unwrapForeignKey(result)
      if result and result[1] and result[1][1] then
         return result[1][1]
      else
         return nil
      end
   end

   local function _loadModule(mod_name)
      assert(type(mod_name) == \"string\", \"mod_name must be a string\")
      print (\"attempting to load \" .. mod_name)
      local conn = sql.open(bridge_modules)
      if not conn then print \"conn fail\" ; return nil end
      package.bridge_loaded = package.bridge_loaded or {}
      -- split the module into project and modname
      local project, mod = string.match(mod_name, \"(.*):(.*)\")
      if not mod then
         mod = mod_name
      end
      local proj_name = project or \"\"
      --print (\"loading \" .. proj_name .. \" \" .. mod)
      -- might be \"module/module\":
      local mod_double = mod .. \"/\" .. mod
      -- might be \"project:module\" -> \"project/module\"
      local proj_double = \"\"
      if project then
         proj_double = project .. \"/\" .. mod
      end
      local code_id = nil
      if project then
         -- retrieve module name by project
         local project_id = _unwrapForeignKey(
                               conn:exec(
                               sql.format(get_project_id, project)))
         if not project_id then
            --print \"no project id\"
            return nil
         end
         code_id = _unwrapForeignKey(
                            conn:exec(
                            sql.format(get_latest_module_code,
                                       project_id, mod)))
         if code_id then
            --print \"project id + mod worked\"
         end
         if not code_id then
            -- try mod_double
            --print (\"trying mod_double \" .. mod_double)
            code_id = _unwrapForeignKey(
                            conn:exec(
                            sql.format(get_latest_module_code,
                                       project_id, mod_double)))
            if code_id then
               --print \"mod_double succeeded\"
            end
         end
         if not code_id then
            -- try proj_double
            code_id = _unwrapForeignKey(
                            conn:exec(
                            sql.format(get_latest_module_bytecode,
                                       project_id, proj_double)))
         end
      else
         -- retrieve by bare module name
         code_id = _unwrapForeignKey(
                                 conn:exec(
                                 sql.format(get_latest_module_code_id,
                                            mod)))
         if code_id then
            print \"code_id acquired\"
         end
         -- Think this logic is dodgy...
         ---[[
         local foreign_keys = conn:exec(sql.format(get_all_module_ids, mod))
         if foreign_keys == nil then
            foreign_keys = conn:exec(sql.format(get_all_module_ids,
                                                mod_double))
            if foreign_keys == nil then
               --print ('no foreign key')
               return nil
            end
         else
            -- iterate through project_ids to check if we have more than one
            -- project with the same module name
            local p_id = foreign_keys[2][1]
            local same_project = true
            for i = 2, #foreign_keys[2] do
               same_project = same_project and p_id == foreign_keys[2][i]
            end
            if not same_project then
               package.warning = package.warning or {}
               table.insert(package.warning,
                  \"warning: multiple projects contain a module called \" .. mod)
            end
            code_id = foreign_keys[1][1]
         end
         --]]
      end
      if not code_id then
         print \"no code_id\"
         conn:close()
         return \"no\"
      end
      local bytecode = _unwrapForeignKey(
                              conn:exec(
                              sql.format(get_latest_module_bytecode, code_id)))
      if bytecode then
         package.bridge_modules[\"@\" .. mod_name] = true
         print (\"loaded \" .. mod_name .. \" from bridge.modules\")
         conn:close()
         local loadFn, errmsg = load(bytecode, \"@\" .. mod_name)
         if loadFn then
            local works, err = pcall(loadFn)
            if works then
               return load(bytecode, \"@\" .. mod_name)
            else
               package.bridge_modules[\"@\" .. mod_name] = err
               return err
            end
         else
            package.bridge_modules[\"@\" .. mod_name] = errmsg
            return errmsg
         end
      else
         print (\"unable to load: \" .. mod_name)
         conn:close()
         return (\"unable to load: \" .. mod_name)
      end
   end"]
// END RANK codeblock_105

section_9 -> { header_130 prose_131 codeblock_132 section_133}
{rank=same; header_130 prose_131 codeblock_132 section_133}

header_130 [label="3 : Add to package.loaders"]

prose_131 [label="prose"]

codeblock_132 [label="code block 254-264"]

section_133 [label="section: 267-273"]


// END RANK section_9

header_130 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Add to package.loaders"]
// END RANK header_130

prose_131 -> { raw_135 prespace_136 literal_137 raw_138}
{rank=same; raw_135 prespace_136 literal_137 raw_138}

raw_135 [label="raw"]

prespace_136 [label="prespace"]

literal_137 [label="literal"]

raw_138 [label="raw"]


// END RANK prose_131

raw_135 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

If"]
// END RANK raw_135

prespace_136 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_136

literal_137 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge.modules"]
// END RANK literal_137

raw_138 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" exists!
"]
// END RANK raw_138

codeblock_132 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   if br_mod then
      print \"loading bridge.modules\"
      local insert = assert(table.insert)
      _G.packload = _loadModule
      --insert(package.loaders, 1, _G.packload)
      package.loaders[#package.loaders + 1] = _loadModule
   else
      print \"no bridge.modules\"
   end"]
// END RANK codeblock_132

section_133 -> { header_144 prose_145 codeblock_146}
{rank=same; header_144 prose_145 codeblock_146}

header_144 [label="4 : end do block"]

prose_145 [label="prose"]

codeblock_146 [label="code block 271-273"]


// END RANK section_133

header_144 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** end do block"]
// END RANK header_144

prose_145 -> { raw_148}
{rank=same; raw_148}

raw_148 [label="raw"]


// END RANK prose_145

raw_148 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This makes everything in the block into garbage if a loader isn't generated.
"]
// END RANK raw_148

codeblock_146 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label="end"]
// END RANK codeblock_146


}

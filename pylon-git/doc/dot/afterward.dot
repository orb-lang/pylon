digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 24"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-5"]


// END RANK doc_0

section_1 -> { header_2 prose_3 section_4}
{rank=same; header_2 prose_3 section_4}

header_2 [label="1 : Afterward"]

prose_3 [label="prose"]

section_4 [label="section: 6-15"]


// END RANK section_1

header_2 -> leaf_5
leaf_5  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Afterward"]
// END RANK header_2

prose_3 -> { raw_6}
{rank=same; raw_6}

raw_6 [label="raw"]


// END RANK prose_3

raw_6 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs cleanup. Does a no-op now to keep the loader clean.

"]
// END RANK raw_6

section_4 -> { header_8 prose_9 prose_10 section_11}
{rank=same; header_8 prose_9 prose_10 section_11}

header_8 [label="2 : br.argparse"]

prose_9 [label="prose"]

prose_10 [label="prose"]

section_11 [label="section: 16-24"]


// END RANK section_4

header_8 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** br.argparse"]
// END RANK header_8

prose_9 -> { raw_13 prespace_14 literal_15 raw_16}
{rank=same; raw_13 prespace_14 literal_15 raw_16}

raw_13 [label="raw"]

prespace_14 [label="prespace"]

literal_15 [label="literal"]

raw_16 [label="raw"]


// END RANK prose_9

raw_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is where we're going to write a proper arg parser for the"]
// END RANK raw_13

prespace_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_14

literal_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="br"]
// END RANK literal_15

raw_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" command
line.
"]
// END RANK raw_16

prose_10 -> { raw_21 prespace_22 literal_23 raw_24 prespace_25 literal_26 raw_27 prespace_28 literal_29 raw_30}
{rank=same; raw_21 prespace_22 literal_23 raw_24 prespace_25 literal_26 raw_27 prespace_28 literal_29 raw_30}

raw_21 [label="raw"]

prespace_22 [label="prespace"]

literal_23 [label="literal"]

raw_24 [label="raw"]

prespace_25 [label="prespace"]

literal_26 [label="literal"]

raw_27 [label="raw"]

prespace_28 [label="prespace"]

literal_29 [label="literal"]

raw_30 [label="raw"]


// END RANK prose_10

raw_21 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An important assumption I'm making is that"]
// END RANK raw_21

prespace_22 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_22

literal_23 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="argparse"]
// END RANK literal_23

raw_24 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is non-destructive of
the command line invocating, such that I can pop a module-level invocation
such as"]
// END RANK raw_24

prespace_25 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_25

literal_26 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="fm"]
// END RANK literal_26

raw_27 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_27

prespace_28 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_28

literal_29 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orb"]
// END RANK literal_29

raw_30 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and then call the particular argument parser distinct
to that submodule.
"]
// END RANK raw_30

section_11 -> { header_41 prose_42 codeblock_43}
{rank=same; header_41 prose_42 codeblock_43}

header_41 [label="3 : Close package.conn"]

prose_42 [label="prose"]

codeblock_43 [label="code block 18-22"]


// END RANK section_11

header_41 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Close package.conn"]
// END RANK header_41

prose_42 -> { raw_45}
{rank=same; raw_45}

raw_45 [label="raw"]


// END RANK prose_42

raw_45 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_45

codeblock_43 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="do
   local three = 1 + 2
end"]
// END RANK codeblock_43


}

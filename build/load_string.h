const char * const LUA_LOAD = "local getinfo, error, rawset, rawget = debug.getinfo, error, rawset, rawget\n"
"local strict = {}\n"
"local function what ()\n"
"    local d = getinfo(3, \"S\")\n"
"    return d and d.what or \"C\"\n"
"end\n"
"local function stricture(name,mod,predeclared)\n"
"    local mt, old_newindex, old_index, old_index_type, global, closed\n"
"    if predeclared then\n"
"        global = predeclared.__global\n"
"        closed = predeclared.__closed\n"
"    end\n"
"    if type(mod) == \'table\' then\n"
"        mt = getmetatable(mod)\n"
"        if mt and rawget(mt,\'__declared\') then return end -- already patched...\n"
"    else\n"
"        mod = {}\n"
"    end\n"
"    if mt == nil then\n"
"        mt = {}\n"
"        setmetatable(mod, mt)\n"
"    else\n"
"        old_newindex = mt.__newindex\n"
"        old_index = mt.__index\n"
"        old_index_type = type(old_index)\n"
"    end\n"
"    mt.__declared = predeclared or {}\n"
"    mt.__newindex = function(t, n, v)\n"
"        if old_newindex then\n"
"            old_newindex(t, n, v)\n"
"            if rawget(t,n)~=nil then return end\n"
"        end\n"
"        if not mt.__declared[n] then\n"
"            if global then\n"
"                local w = what()\n"
"                if w ~= \"main\" and w ~= \"C\" then\n"
"                    error(\"assign to undeclared global \'\"..n..\"\'\", 2)\n"
"                end\n"
"            end\n"
"            mt.__declared[n] = true\n"
"        end\n"
"        rawset(t, n, v)\n"
"    end\n"
"    mt.__index = function(t,n)\n"
"        if not mt.__declared[n] and what() ~= \"C\" then\n"
"            if old_index then\n"
"                if old_index_type == \"table\" then\n"
"                    local fallback = old_index[n]\n"
"                    if fallback ~= nil then\n"
"                        return fallback\n"
"                    end\n"
"                else\n"
"                    local res = old_index(t, n)\n"
"                    if res ~= nil then\n"
"                        return res\n"
"                    end\n"
"                end\n"
"            end\n"
"            local msg = \"variable \'\"..n..\"\' is not declared\"\n"
"            if name then\n"
"                msg = msg .. \" in \'\"..name..\"\'\"\n"
"            end\n"
"            error(msg, 2)\n"
"        end\n"
"        return rawget(t, n)\n"
"    end\n"
"    return mod\n"
"end\n"
"local function make_all_strict (T)\n"
"    for k,v in pairs(T) do\n"
"        if type(v) == \'table\' and v ~= T then\n"
"            stricture(k,v)\n"
"        end\n"
"    end\n"
"end\n"
"stricture(nil,_G,{_PROMPT=true,__global=true})\n"
"if string.sub(arg[0], -4) == \".lua\" then\n"
"   require(string.sub(arg[0], 1, -5))\n"
"elseif string.sub(arg[0], -4) == \".raw\" then\n"
"   loadfile(arg[0])()\n"
"else\n"
"   require (arg[0])\n"
"end\n";
